8.7)Delete - 투두 삭제하기

지금까지 만든 todo list에 있는 모든 todo에는 각각 삭제버튼이 존재한다. 그래서 이버튼을 클릭하게 되면 todo item이 이 리스트에서 제거가 되어야한다. 결국 이번에 만드는 기능 또한 todos state내부에 값을 수정하는 것이다. 그렇기에 onUpdate함수를 만든것 처럼 onDelete를 생성해주고 매개변수로 target.id를 받아와서 해당 id를 갖는 todoitem을 todos state에서 제거해주면 된다.
setTodos()의 인수로 target.id와 동일한 id를 갖는 요소를 삭제한 배열을 넣어주면 된다. 그래서 기존 배열에서 이런 조건을 만족하는 요소만 딱 제외하고 나머지 요소들로만 필터링하기 위해서 todos의 filter메서드를 사용하면된다. 그리고 callback함수로는 모든 todos를 순회하면서 3항연산자로 todo의 id값이 target.id와 같지 않은 todo만 필터링하도록 만들어주면 된다. 그러면 삭제되어야하는 item만 제외한 새로운 배열을 만들어서 인수로 전달해줄 수 있기에 결과적으론 해당 아이템이 todos state에서 잘 제거가 된다.

그러면 이제 이 함수는 어디에서 호출이되어야 하냐면 todoitem컴포넌트의 삭제버튼이 클릭되었을때 삭제가 되어야하기에 update를 만들때와 동일하게 리스트 컴포넌트 안에 todoitem컴포넌트 안에 버튼이 클릭되었을때 호출해주면 된다. 이전에 했던 것과 같이 App컴포넌트에서  onDelete함수를 List컴포넌트에게 먼저 props로 전달해주고 List컴포넌트는 이함수를 props로 받아서 todoitem컴포넌트에게 props로 전달하고 todoitem컴포넌트에서 똑같이 props로 받아서 버튼을 클릭할때 호출되면서 인수로 id를 전달해주면된다. 
그래서 먼저 onClickDelete라는 함수를 만들어서 이 함수에서 onDelete함수를 호출하고 인수로 id를 전달하도록 만들면서 onClickDelete 함수를 삭제버튼의 onClick함수의 이벤트 핸들러로 등록을 해주면 된다.


todo list를 구현하면서 배운점

display:flex = todoitem.css 원하는 요소를 가로로배치하는 법을 배움
배열형태의 데이터를 만들어서 list형태로 렌더링하는 방법 
데이터를 추가, 제거, 수정, 검색하는 방법을 배움
-----

섹션 9. useReducer
9.1) useReducer를 소개합니다.
useReducer라는 새로운 리액트 hook을 배워보자.

section08을 이용해서 사용할 것이다. 우선 이걸 복사해서 section09디렉터리를 만들고 넣어주자.
useReducer는 useState와 동일하게 컴포넌트 내부에 새로운 state를 생성하는 리액트 hook이다.
그렇기에 지금까지 만들어둔 useReducer를 이용해서도 동일하게 만들수 있는데 그렇기에 useState와 거의 비슷한 기능을 한다.
useReducer를 이용하면 useState와는 달리 상태를 관리하는 코드들을 컴포넌트 외부로 분리할 수 있다는 핵심적인 차이점이 있다.
원래 우리가 useState를 이용할때는 onCreate와 같이 state를 관리하는 코드, 상태를 관리하는 코드들을 컴포넌트 내부에만 작성해야 했으나 useReducer를 이용하면 컴포넌트 내부에서는 state생성만 해두고 실제로 state를 관리하는 코드들은 reducer라는 함수를 통해서 컴포넌트 외부에서 관리하도록 코드를 분리할 수 있다. 

우리가 이전 섹션에서 todolist프로젝트르 개발할때 todo데이터를 관리하는 state를 App컴포넌트내부에 useState를 이용해서 만들었는데 이렇게 되면 todos와 setTodos라는 함수는 App컴포넌트 내부에서만 사용할 수 있기에 이 state를 관리하는 코드들은 반드시 App컴포넌트 내부에만 작성이 되어야했다. 그렇기에 이렇게 state에 새로운 값을 추가하는 onCreate나 state에 특정값을 수정하는 onUpdate나 state에 특정값을 제거하는 onDelete와 같은 todos state를 관리하는 코드들을 반드시 App컴포넌트 내부에 작성이 되어 있어야 했다. setTodos같은 함수나 todos같은 state는 아까 말했던거서럼 App컴포넌트를 벗어난 공간에서는 접근할 수 없기 때문이다. 
그런데 그러다보니 컴포넌트 내부에 상태관리 코드들이 너무 길어지게 되었다. 그래서 지금도 충분히 기나 현재보다 더 복잡해지거나 훨씬더 다양한 상태변화를 제공하는 경우에는 컴포넌트 내부에 훨씬더 긴 코드를 작성해야한다. 그런게 리액트 컴포넌트의 가장 주된역할은 UI를 렌더링하는 역할이다. 그렇기에 이렇게 state를 관리하는 코드가 너무 많아지면 사실상 주객이 전도된것이다. UI를 렌더링하는 코드보다 상태를 관리하는 코드들이 훨씬더 복잡하고 길어기 때문이다. 그렇기에 App컴포넌트가 렌더링하는 요소가 무엇인지 한눈에 파악하기 어렵다. 그러면 가독성이 떨어지고 유지보수가 어려워지게 된다. 그렇기에 결국 우린 상태를 관리하는 코드들이 점점 길어지고 복잡해져야한다면 이런 코드들을 별도의 함수로써 분리해줄 필요가 있다. 그러나 useState를 이용하면 이런 기능을 만들 수 없기에 이럴때 컴포넌트 내부의 상태관리를 분리시킬수 있도록 만들어주는 useReducer가 필요한 것이다.

이번에 App컴포넌트의 todos를 useState가 아니라 useReducer를 이용하도록 바꿀 것인데 처음부터 이렇게 큰 state를 바꾸면 너무 어렵기에 일단 실습을 위한 컴포넌트를 만들고 그 컴포넌트 내부에서 useReducer의 사용법을 알아보자.
src/components/Exam.jsx를 만들고 컴포넌트를 만들어주자. 그리고 App컴포넌트에서 import시켜주고 App컴포넌트의 return문 내부를 일단 모두 주석 처리한 후에 Exam태그를 넣어주자.

이제 Exam컴포넌트에서 useReducer를 실습해보기로 하자. 먼저 간단한 Counter기능을 만들어보자. return문 안에 h1으로 counter를 0으로 표시하고 버튼을 하나만들어서 +라고 넣어주자.

그리고 이제 useReducer를 이용해서 새로운 state를 생성해보자. 가장 먼저 useReducer를 불러오고 컴포넌트안에서 
const [state, dispath] = useReducer()로 useReducer hook을 호출해주면 일단 useState와 동일하게 새로운 state를 생성해서 배열의 첫번째 요소에 반환해주는데 dispatch라고 불리는 상태변화를 요청하기만 하는 함수를 반환해준다. 참고로 이때 dispatch라는 뜻은 발송하다, 급송하다 라는 뜻을 가지고 있다. 그렇기에 결국 dispatch함수는 상태변화가 있어야 한다는 사실을 알리는, 발송하는 함수라고 생각하면 된다.
이제 이 컴포넌트 내부에서 dispatch함수를 호출하면 상태변화를 요청하고, useReducer가 상태변화를 실제로 처리하게될 함수를 호출하는데 그 함수는 우리가 직접 만들어야한다. 컴포넌트 밖에 function reducer로 함수를 만들고 useReducer()의 인수로 useReducer(reducer)라고 넣어주면 된다. 이때 참고로 reducer라는 말은 우리말로 변환기라는 의미를 갖는다. 결국 reducer는 상태를 실제로 변화시키는 변환기 역할을 하는 함수라고 이해하면된다. 그래서 useReducer의 첫번째 인수로는 상태를 실제로 변화시키는 변환기역할을 하는 reducer라는 함수를 만들어 넣어주면되고 두번째인수로는 state의 초기값을 전달해준다. 그래서 useReducer(reducer, 0)이렇게 전달해준 다음에 h1태그 안에 state의 값을 렌더링해주게 해주면 화면에 0이 잘 렌더링되는 것을 볼 수 있다. 그러면 이제 버튼을 클릭하면 state의 값을 1씩 증가해줘야하니까 컴포넌트 내부에서 버튼이 클릭되었을때 dispatch함수를 호출해서 상태변화를 요청(발송)하면 된다. 그렇기에 컴포넌트 안에 onClickPlus라는 함수를 만들어서 button의 onClick이벤트에 등록해주고 함수 안에서 dispatch를 호출해서 상태변화를 요청하는데 인수로는 상태가 어떻게 변화되길 원하는지에 대한 정보를 주게될텐데 그렇기에 보통은 dispatch함수에는 객체의 형태로 타입이라는 property에는 상태를 어덯게 변화시키기를 원하는지를 작성한다. 우리는 +버튼을 눌렀을때 state의 값을 1증가시키길 원하는것이기에 문자열로 increase라고 작성해주자. 그리고 얼마나 증가시킬지 명시를 해줘야 하기에 data라는 property로 1만큼 증가시키라고 넣어주자.
그래서 이 코드는 지금 일단은 dispatch로 상태변화를 요청했고 그 요청의 결과로 객체를 전달했는데 이 객체 안에 type은 increase로 값을 증가시키겠다고 작성했고 얼만큼 증가시킬지 data:1로 1만큼 증가시키겠다고 한것임. 그렇기에 이렇게 인수로 전달된 요청에 내용을 담은 객체를 action객체 라고 부른다. 이렇게 action객체를 인수로 전달하면서 dispatch를 호출해주면 useReducer가 요청을 처리하기 위해서 reducer함수를 호출해주고 reducer함수의 매개변수로는 현재의 state값을 전달하고 요청의 내용이 담긴 action객체를 전달해준다. 그래서 다시 정리하자면 dispatch함수를 호출해주면 reducer 함수가 호출되고 그때 action객체가 매개변수로 전달이 된다. 그렇기에 reducer함수 안에 시험삼아서 console.log로 state와 action을 출력하도록 하고 browser에서 개발자도구에 console탭을 키고 +버튼을 눌러보면 출력이 잘 되는 것을 볼 수 있다. 그래서 code상에 reducer함수에서는 매개변수로 받은 현재의 state값고 action객체를 이용해서 실제로 state의 값을 변경시켜주면 된다. 그런데 이렇게 상태변화 함수도 없는데 어떻게 state를 변경할 수 있는가 하면, 그냥 reducer함수에서 새로운 state값을 그냥 반환해주기만 하면 된다. 그러면 반환값을 useReducer가 불러와서 실제로 state값을 변경시켜주게 된다. 그렇기에 reducer함수안에 if조건문으로 action객체의 타입이 increase라고 들어오면 이런 형태로 dispatch를 날린거고 그건 +버튼을 누른것이기에 새로운 state값으로 return state + action.data라고 해서 현재 state의 값에 action객체에 data라고 전달한 값을 더해서 반환을 해주면 된다.

그러면 새로운 상태변화를 추가로 만들어보자. return문 안에 button을 추가해주고 이번엔 -를 추가하고 onClickMinus를 만들어서 onClick의 이벤트 핸들러로 적용시켜주고 dispatch를 호출하고 action객체로 타입은 -1을 해줄 것이기에 decrease, data는 1만큼 감소시키라는 의미로 1을 전달해주자. 그리고 reducer에는 else if로 action.type이 decrease일때는 return state - action.data로 return을 해주자.

이 때 참고로 reducer함수 내부에 action들의 타입이 너무 많아질것 같다면 if문 보다는 switch문으로 작성하는것이 일반적이다(switch 문으로 수정하자.)

-----

9.2) 투두 리스트 업그레이드
useReducer를 todoList에 적용해서 업그레이드 해보자.
Exam컴포넌트를 제거하고 주석을 풀어주고 App컴포넌트의 내부에 todos state를 useReducer로 변경해보자.
useReducer를 불러오고 App컴포넌트안에서 useState라인을 지우고 const [todos, dispatch] = useReducer();를 하고 App컴포넌트 외부에 fuction reducer를 생성하고 useReducer의 첫번째 인수로 전달해주자. 그러면 이제 todos state의 상태변화는 실질적으로 reducer함수가 담당할 것이다. 그리고 두번째 인수로는 mockData를 전달해서 초기값으로 3개의 객체배열로 설정해주자. 그러면 일단 useState를 이용하던 todos state를 useReducer를 이용하도록 변경했다. 이제 onCreate, onUpdate, onDelete와 같은 상태변화함수들의 코드들을 전부 reducer함수에 옮겨주고 dispatch함수만 호출하도록 변형해주자. 먼저 onCreate부터 해보자면 내부를 모두 지우고 dispatch를 호출하고 action객체로 type은 create, data로는 새롭게 생성할 todo아이템을 객체로 넣어주면된다. 기존처럼 내용을 넣어준다. 그러면 이제 브라우저에 todo editor에서 추가버튼을 클릭하면 onCreate를 호출하고 dispatch함수를 호출하게 될것이고 결과로 reducer함수를 호출하게 될것이다. 이제 reducer함수에서는 매개변수로 현재 state값과 action객체를 받아와서 action객체의 값에 따라 변화된 state의 값을 return해주면 되기에 switch를 통해서 action.type이 create일때는 App컴포넌트에서는 이렇게 todo item을 생성해달라고 요청을 보낸것이기에 새로운 state의 값에 새로운 배열을 반환할 것인데 첫번째 요소에는 새롭게 추가될 데이터인 action.data를 넣고 ...state로 기존의 state의 값을 그대로 펼쳐주면 된다. 참고로 action.data는 onCreate함수에서 dispatch로 전달한 새로운 todo아이템일것이다.

이렇게 새로운 데이터를 생성하는 기능을 useReducer로 변경했고 onUpdate를 바꿔주자. 
setTodos함수는 없기에 전부 지우고 onCreate할때 처럼 dispatch를 호출하고 type을 update로 지정하고 data보다는 target.id로 어떤 요소를 수정할지만 전달해주자. 그러면 reducer함수에서는 case로 action.type이 update일때 return으로 state의 기존값에서 map메서드를 이용해서 state안의 id와 action.id와 같다면 3항연산자로 변형된 배열을 반환하도록 하면 된다.
...item으로 기존 값을 나열해주고 isDone property값만 isDone으로 토글시켜주면 된다. 만약 조건이 거짓이면 그냥 item을 return하도록하면 된다. 이러면 action.target.id를 갖는 것만 isDone이 반전, 토글이 될것이고 나머지 요소들은 그대로 유지가 될것이다.

onDelete도 useReducer를 이용하도록 바꾸자.
dispatch함수를 호출하고 type은 delete를 전달하고 target.id로는 매개변수로 받은 id를 넣어주고 reducer함수에서 case가 delete라면 return에 state.filter로 item의 id가 action.target.id와 같지 않은 요소만 필터링하면 된다.

마지막으로 그 셋다(create, update, delete)가 아니라면 default로 state를 기본으로 반환하도록 하자.

 
보통은 리액트에서 state를 관리할때는 배열안에 객체가 들어가는 복잡한 구조는 useReducer를 이용하는게 보편적이고 counter처럼 간단한경우는 useState로 하는것이 충분하다.

-----

섹션 10 최적화

10.1) 최적화란

최적화란 서비스의 성능을 개선하는 모든 행위를 말함.
웹 서비스의 최적화란 아주 단순한것 부터 아주 어려운것 까지 다양한 방법이 있는데 서버의 응답속도를 개선한다던가, 이미지나 폰트 등의 정적 파일들의 로딩속도를 빠르게 만든다던가 또는 불필요한 네트워크 요청을 줄인다던가 하는 일반적인 모든 웹 서비스들에 다 적용할 수 있는 최적화 방법도 있고 컴포넌트 내부에 불필요한 연산을 방지한다던가 컴포넌트 내부에 어떤 함수를 다시 생성하지 않도록 막아준다던가 컴포넌트가 딱 필요한 순간에만 리 랜더링되도록 불필요한 리렌더링을 방지하는 것과같은 리액트 내부에서만 수행하는 특별한 최적화 방법도 존재한다. 또 리액트에 대한 내용을 심도 있게 다루기에 리액트 컴포넌트 내부에서만 진행 가능한 리액트만의 세가지 최적화 방법에 대해서 하나씩 알아보자.
마지막으로 새로운 리액트 앱을 세팅해보자. 이번 섹션에서도 새로운 프로젝트를 진행할 건 아니기에 todolist앱을 그대로 이용할 것임. section10을 만들고 복사해서 만들어 두자.

---
10.2) useMemo와 연산최적화

useMemo라는 새로운 리액트 hook을 이용해서 컴포넌트 내부에 불필요한 연산을 다시 수행하지 않도록 최적화하는방법을 살펴보자.
우선 useMemo는 memoization이라는 방식을 기반으로 불필요한 연산을 다시 수행하지 않도록 리액트 앱을 최적화해주는 리액트 hook이다. Memoization이란 기억해두기, 메모해두기란뜻을갖는데 프로그램에서 동일한 연산을 반복적으로 수행해야할때 결과값을 매번 새롭게 계산하는 방식이 아니라, 최초로 한번 계산할 때의 결과값을 메모리 어딘가 보관해둔 다음에 다시 이 연산이 필요한 경우 저장된 값을 돌려주는 기법을 말한다.
Memoization기법을 이용하면 최초에 수행 이후엔 결과값을 저장한 다음에 매번 동일한연산을 불필요하게 수행할 필요가 없기에 프로그래밍의 성능이 나빠지지 않는다.
예를 들어  사람이 아주 많은 식당에서 식사를 하는데 우리가 시킨 메뉴가 엄청 독특하다면 지나가는 사람마다 메뉴가 뭔지 물어본다. 이런 질문을 받을때마다 내가 뭘 시켰는지 메뉴판에서 찾아보고 다시 대답을 해주지 않는다. 보통은 한번 주문하면 메뉴의 이름을 외우기 때문에(Memoization) 바로 머리속에 있는 정보를 꺼내오기만 해서 메뉴의 이름을 답변해준다. 바로 이게 Memoization이다. 그리고 리액트에서는 useMemo를 이용해서 이 Memoization기법을 이용해서 결과값을 기억할 수 있게 된다.
useMemo를 이용해서 컴포넌트 내부에 불필요한 연산을 방지하여 최적화하는 방법을 알아보자. 이전에 만들었던 todolist app에는 당장은 불필요한 연산이없다. 그렇기에 List컴포넌트 안에 현재의 todo들의 상태를 분석해서 수치를 제공하는 함수를 만들어보자. 컴포넌트맨아래 return문 위에 const getAnalizedData라는 화살표 함수를 만들고 함수 내부에 const totalCount라고 해서 현재 등록된 전체 todoitem의 갯수를 저장해보자. 그래서 todos state에 length라는 값으로 초기화를 해주고 const doneCount라고 해서 전체 todo중 완료된 todo의 갯수를 저장할 것인데 값으로는 todos.filter메서드를 사용해서 callback함수로 todo.isDone이 true인 아이템들만 필터링해서 length로 길이를 저장해두자. 그리고 마지막으로 const notDoneCount로 완료되지 않은 todo의 갯수를 저장해보자. totalCount에서 doneCount를 뺀값을 저장해주자.  그리고 세가지를 RETURN객체로 묶어서 내보내주자. 그러면 이제 List컴포넌트가 리렌더링 될때마다 List컴포넌트 안에서 RETURN문 위에 getAnalizedData함수를 호출해주고 그결과값을 구조분해할당을 이용해서 순서대로 totalCount, doneCount, notDoneCount를 받아와주자. 그리고 나서 이렇게 구한 수치값들을 렌더링해주기 위해 컴포넌트 return문안에 h2태그 아래에 div태그를 하나 선언하고 그 내부에 div로 total = {totalCount} done={doneCount}, notDong={notDoneCount}라고 적어주자. 그러면 이제 브라우저에 새로고침해보면 분석된 수치값들이 잘 렌더링 될 것이다.

이렇게 리스트 컴포넌트에 새로운 기능인 현재 todo를 분석하는 함수를 만들었는데 이때 이 연산과정은 filter라는 메서드를 이용하고 있기에 todo state에 보관된 data의 갯수가 증가하면 증가할 수록 훨씬더 오래걸리는 함수가 될것이다. (filter메서드는 전체 요소를 한번씩 순회하기 때문임.) 그래서 최대한 이 함수가 불필요하게 호출되는 상황을 방지해야 하는데 이 함수는 컴포넌트 내에서 그냥 바로 호출하고 있기에 List컴포넌트가 리렌더링될때마다 계속 새롭게 호출이 될것이다. getAnalizedData()함수 맨 위에 console.log("getAnalizedData() 호출")을 작성해주고 보면 List컴포넌트가 최초에 렌더링될때 한번 출력이 되고 List컴포넌트안에서 state를 관리하고 있는 search bar에 react라고 검색해보면 콘솔에 메세지가 5회 발생하는것을 보면 리렌더링 횟수만큼 함수가 호출 되는것을 알 수 있다. 
이건 명백한 낭비이다.  왜냐면 search bar에 뭔가를 검색한다고 todo에 대한 정보가 변경되는 것이 아니기에 계속 조회해야할 필요가 없다. 추가, 수정, 삭제시에만 다시 호출하는게 맞기에 연산자체를 memoization할 수 있는 방법이 필요한데 이럴때 useMemo를 사용하는 것이다. 
useMemo를 사용하면 이 연산 자체를 Memoization 할 수있고 특정 조건이 만족할 때에만 결과값을 다시 계산하게 설정할 수 있다.
useMemo를 먼저 import하고 컴포넌트 내부에 useMemo를 호출해주고 첫번째 인수로 callback함수를 넣고 두번째 인수로 배열을 넣어주면 되는데 두번째 인수가 deps(의존성배열)이다. useEffect처럼 deps에 포함된 값이 변경되었을때만 callback함수를 다시실행하고 그리고 그 callback함수가 반환하는 값을 useMemo가 그대로 반환해준다. 그냥 return 1을 해주면 그 결과값을 받아서 사용까지할 수 있는 hook이다.
그렇기에 useMemo의 첫번째 매개변수, callback함수에는 Memoization하고 싶은 내용을 적어주면 되는데 우리는 getAnalizedData함수의 내용을 그대로 넣어주자. 그러면 useMemo는 우리가 첫번째 인수로 전달한 callback함수가 반환하는 값을 그대로 반환해준다. 그래서 결국 이렇게 호출한 useMemo의 반환값은 이 객체이기 때문에 getAnalizedData를 호출했을때 했던것 처럼 동일하게 const [totalCount, doneCount, notDoneCount] = useMemo(.. 도 가능하다. 그리고 getAnalizedData함수도 useMemo안에서 연산을 하기에 필요가 없어진다.

지금까지 나온 useMemo에 대한 내용은 

1. 첫번째 인수로 전달한 Callback함수는 내부에서 발생한 결과값을 그대로 반환해준다.
2. 첫번째 인수로 전달한 Callback함수의 내용을 Memoization한다.

이러면 메세지는 딱한번만 출력이 되면서 useMemo는 딱한번만 출력이 된다. 그런데 이때 경고메세지가 나오는데 난 발생을 안함(아마 콜백함수 안에 배열을 안넣어서 그런듯 - 그건 아니고 뭔가 문제가 있는듯 - 보니까 콘솔 에러가 아니라 에러 관련 부분에서 나오는 것을 말하는듯함)

빈 배열로는 값이 변화해도 반영이 되지 않기 때문에 deps에 todos를 추가해주면 끝이다.



------


10.3) React.memo와 컴포넌트 렌더링 최적화
Memo라는 리액트 내장 메서드를 사용해서 컴포넌트의 불필요한 리렌더링을 방지하는 방법을 알아보자.
React.memo는 리액트의 내장함수로 인수로 리액트의 컴포넌트를 받아서 해당 컴포넌트의 최적화 기능을 추가한 다음에 결과값으로 반환해준다. 이렇게 최적화 기능을 추가한 기능은 props를 기준으로 Memoization된다. 구체적으로는 Memoized 컴포넌트는 부모 컴포넌트가 리렌더링되더라도 자신이 받는 props가 바뀌지않으면 다시는 리렌더링이 발생하지 않도록 Memoization되기에 불필요한 리렌더링이 방지되어 자동으로 최적화가 이루어진다. 
이번에 실습을 위해 Todo List에서 어떤것이 불필요한지 확인해보자. 개발자도구에 컴포넌트에서 톱니바퀴를 눌러서 setting 창을 열고 렌더되는 요소에 하이라이틀주는 옵션을 켜주고 확인해보자. 이렇게 설정했다면 개발자도구를 끄지말고 확인해볼것이다.
상단에 Header, Editor, List 모두 리렌더링이 발생한다. 이렇게 todo data를 수정하면 모든 컴포넌트가 리렌더링된다.
근데 보면 Header 컴포넌트는 리렌더링 될 필요가 없다. App컴포넌트의 자식으로 베치되어 있기에 부모 컴포넌트를 따라서 자식이 리렌더링 되고 있는 것인데 보면 props로 아무런값도 받지 않고 Header컴포넌트는는 date객체 하나만 렌더링하는 기능만 존재하기에 todo data가 수정된다고 해서 이 컴포넌트가 다시 렌더링 되어야할 필요가 없다. 그래서 Header컴포넌트의 불필요한 리렌더링을 방지하기 위해서 앞서 소개한 React.memo를 살펴볼것이다.


Header컴포넌트로 이동해서 먼저 메모를 import해보자.

import { memo } from 'react'

로 메모 메서드를 불러오고 파일의 하단에 컴포넌트 밖에서 memo메서드를 호출하고 인수로는 최적화하고자 하는 컴포넌트인 Header를 넣어주면 된다.
 
memo(Header);

그러면 이제 memo메서드는 인수로 받은 Header컴포넌트를 props가 변경되지 않은 경우 리렌더링 하지 않도록 최적화해서 반환해주기에 그 반환값을 const memoizedHeader라는 변수에 저장해주고 export에서 Header가 아니라 최적화가 이루어진 헤더 컴포넌트인 memoizedHeader를 내보내주면 된다. 이때 이런 경고 메세지가 발생하는데 이 경고메세지는 리액트의 동작에는 영향을 주지 않아서 무시해도 되나 신경쓰인다면 마우스 커서를 올려놓으면 경고 메세지를 볼 수 있다. 안에 적혀 있는 것은 ESLint의 옵션이 나와있는데 그냥 이 옵션을 끄면 된다. 소괄호 안의 옵션을 복사해서 rules안에 새로운 옵션으로 추가하고 off를 값으로 추가하면 옵션이 꺼져서 문제가 사라진다.

이렇게 React.memo를 이용해서 불필요한 리렌더링을 방지하는 최적화를 해봤다. 
(export default memo(Header);로 넣어도 문제는 없이 사용된다.)

하나 더해보자면 아이템의 체크박스를 껐다가 켜보면 빨래하기랑 체크박스를 선택하지 않은 컴포넌트들도 리렌더링이 발생한다. 이 또한 불필요한 리렌더링이기에 수정을 해보자.

Todoitem컴포넌트로 이동해서 props가 변경되지 않았을때는 리렌더링 되지 않도록 memo메서드를 이용해서 최적화해보자.
파일 상단에 memo를 import해주고 파일 최하단에 memo(Todoitem)으로 내보내보자. 
그러면 이제 Todoitem컴포넌트는 자신이 받고 있는 props가 변경되지 않는 이상 렌더링이 발생하지 않을것이다.

근데 실제로 껐다가 켰다 해보면 모두 리렌더링 되는 것을 볼 수 있다. 이건 memo메서드가 제대로 동작하지 않는것 처럼 보인다. 왜 이러는 것일까? 
memo는 사실 제대로 수행했다. 우리가 checkbox를 클릭해서 todos data를 변경하면(App컴포넌트안의 todos의 데이터를 바꾸면) 리렌더링 되고 App함수가 재 호출되고 함수 내부의 onCreate, onUpdate, onDelete도 다시 새롭게 만들어진다. 그런데 함수는 객체타입이기에 같은 동작을 하더라도 새로 생성될때마다 아예 다른 값으로 인식한다. 그 이유는 자바스크립트에서 객체자료형을 살펴볼때 함수들은 객체 자료형에 해당하기 때문에 우리의 값은 주소값으로써 저장이된다고 배웠었다. 그리고 그 객체들간의 비교는 이 주소값을 통해서 비교한다고했었기에 const a = {a:1} const b = {a:1} 일때도 내부가 완전히 같은 것이더라도 생성될때마다 주소값이 다르기에 console.log로 값을 비교해보면 브라우저의 콘솔에 false로 서로 다른객체로 평가한다고 했었다. 그렇기에 객체 타입인 함수도 컴포넌트가 리렌더링되면서 새로 다시 생성되면 주소값이 계속 바뀌기에 사실상 매번 다른것으로 인식하는 것이다. 그렇기에 Todoitem에 전달되는 onUpdate와 onDelete도 매번 앱 컴포넌트가 리렌더링 될때마다 매번 다시생성되어 전달이 되고 있었던 것임. 
그리고 memo메서드는 props가 변경될 때만 컴포넌트가 리렌더링 하도록 최적화하기에 매번 리렌더링이 발생할 때마다 현재의 props와 과거의 props를 비교한다. 그래서 두개의 props가 서로 같은값인지 다른값인지를 판단해서 Todoitem을 리렌더링할지 말지를 결정하는데 이 memo메서드는 기본적으로 얕은 비교를 하기에 객체 타입의 값은 무조건 서로 다른 값이라고 판단을 한다. 그래서 결과적으로 하나의 Todoitem을 수정하면 다른 Todoitem에서도 memo메서드가 적용이 되었으나 모두 리렌더링해주는 것이다. 쉽게 말하면 App컴포넌트가 리렌더링이 되면 함수들모두 전부 다시생성되기에 결국 Todoitem가 props로 받는 함수들이 새롭게 전달이 되어 메모를 적용해도 리렌더링이 발생한다는 것임. 그렇기에 객체타입을 props로 받는 컴포넌트는 memo메서드를 적용한다고 해도 최적화가 되지 않는다. 이럴땐 두가지 방법이 있는데 첫번째로 App컴포넌트에서 함수들을 Memoization하여 리렌더링이 발생해도 다시생성되지 않도록하는 것이다. 그런데 이렇게하려면 다음시간에 배울 useCallback을 이용해야하기에 나중에 보고 이번엔 Todoitem컴포넌트의 memo함수안에 두번째 인수로 Callback함수를 전달해서 최적화 기능을 Customizing해주면 된다. 두번째 인수로 callback함수를 전달가능한데 보통은 생략하다 전달해주면 그순간 부터 memo메서드는 부모 컴포넌트가 리렌더링 될때마다 컴포넌트의 props가 바뀌었는지 스스로 판단하는게 아니라 callback함수의 매개변수로 과거의 props와 현재의 props를 전달해서 함수의 전달값에 따라 props가 바뀌었는지 안바뀌었는지를 판단한다. 그래서 이 callback함수에서 true를 반환하게 되면 props가 바뀌지 않았다고 판단하고 false를 반환하면 props가 바뀌었다고 판단한다. true를 반환하면 리랜더링을 하지말라는거고 false를 반환하면 리렌더링을 하라는 것이다. 그렇기에 이 callback함수안에 우리가 원하는 Todoitem컴포넌트가 갖는 props들 중에 onUpdate와 onDelete를 제외한 id, isDone, content, date만 바뀌었을때 리렌더링 해주면 되는 것이기에 

if(prevProps.id = nextProps.id) return false;
if(prevProps.isDone = nextProps.isDone) return false;
if(prevProps.content = nextProps.content) return false;
if(prevProps.data = nextProps.date) return false;

return true;

이렇게 해서 설정해주면 이제 저조건 안에서만 리렌더링 하게된다.

이렇게 컴포넌트를 인수로 받아서 해당 컴포넌트에 추가적인 기능(최적화나 Memoization)을 덧붙혀서 기능이 추가된 새로운 컴포넌트를 반환해주는 memo와 같은 메서드들을 리액트에선 고차컴포넌트(Higher Order Componenet, HOC)라고 부른다. 이걸 이용하면 한번 호출하는 것 만으로 컴포넌트에 새로은 기능을 부여할 수 있기에 복잡한 리액트 앱을 구축할때 괘나 자주쓰는 유용한 방법이다. 

그리고 memo 말고도 직접 만들 수 도 있기에 
https://patterns-dev-kr.github.io/design-patterns/hoc-pattern/
에서 확인해보자 

-----

10.4)useCallback과 함수 재생성 방지

최적화의 마지막으로 useCallback을 이용해서 불필요한 함수의 재생성을 방지해보자.

최적화를 할때 이제 앞으로 memo메서드를 매번 props를 확인해서 비교하면 매우 불편할 것이다. 게다가 props의 이름이 변경되기라도 한다면 memo메서드 안에도 바꿔줘야하고 새로운 props가 추가되면 또 추가해줘야하는 경우가 생겨 불편할 것이다.
그래서 이럴땐 그냥 onUpdate와 onDelete가 에초에 다시 생성되지 않도록 최적화하는게 조금더 좋은 방법일 수 있다. 이런 것을 가능하게 하는것이 useCallback이라는 리액트 hook이다. 
직접 사용해보자면, App컴포넌트로 가서 상단에 useCallback을 불러오고 컴포넌트 안에서 바로 return문 위에 useCallback을 호출하고 첫번째인수로 최적화하고 싶은 함수를(불필요하게 재생성하고 싶지 않은 함수) 인자로 넣어주고 두번째 인수로는 deps를 넣어주면 된다. 그러면 useCallback은 기본적으로 첫번째로 전달한 callback함수를 그대로 생성해서 반환을 해준다. 그러면 이것 또한 변수로 담아줄 수 있을 것이다. 그리고 이렇게 생성된 함수를 deps가 변경될때만 다시 생성되도록 최적화를 해준다(함수를 Memoization해준다는 의미임). 그렇기에 deps를 빈배열로 설정 해주면 컴포넌트가 마운트 될때만 함수를 한번 생성하고 그 다음엔 아무리 리랜더링이 되더라도 새롭게 생성하지 않는다. 이런 점을 이용하면 함수들을 다시 생성하지 않도록 최적화 할 수 있다.

useCallback()내에 익명함수로 생성해서 내부 코드를 복사해서 넣어준다. 그리고 두번째 인수로 빈배열을 넣어서 onDelete함수를 다시는 생성하지 않도록해주면 된다. 이제 이걸 const onDelete에 저장해주고 기존것은 지워주면 된다. 나머지 함수들도 최적화를 해주면 된다.  

이제 Todoitem컴포넌트에서 별도로 callback함수를 memo메서드로 전달하지 않아도 되고 이전처럼 export default memoTodoitem;으로 export만 해줘도 이제 된다.

주의 해야 할 점은 최적화는 언제하는가, 어떤것을 하는가가 중요한 기준이 된다. 최적화를 너무 이른타이밍에 해도, 너무 많은 것을 하려고 해도 문제가 있다.

최적화를 하는 시점은 언제가 좋은가?
보통 리액트앱을 최적화할 때에는 보통 하나의 프로젝트를 거의 완성한 상태에서 최적화를 하게 된다. 그래서 항상 기능을 구현하는게 먼저여야하고 기능이 완성이 되면 그 뒤에 최적화를 하는게 일반적인 방법이다. 왜냐면 최적화를 위해 useCallback과 같은 메서드를 적용하고 나면 새로운 기능을 추가하거나 수정하게 되면 최적화가 풀리거나 고장나는 경우도 생기기 때문임. 그렇기에 기능구현이 먼저, 마지막에 최적화하는 것이 좋다.

그럼 어떤 것이최적화의 대상이 되어야하는가? 
모든것을 적용하면 안되고 꼭 최적화가 필요할것 같은 연산, 함수, 컴포넌트에만 적용하는게 좋다. 예를 들어 Header컴포넌트처럼 매우 단순한 컴포넌트처럼 memo메서드를 적용했는데 이 memo메서드도 연산이 필요로 하는 메서드이다(props의 값을 비교한다거나, 메모리에 컴포넌트 값을 저장한다던가). 그런데 이렇게 최적화하는 컴포넌트가 별일도 하지 않는 컴포넌트라면 그냥 다시 리렌더링하는게 더 빠를수도 있다. 그렇기에 보통은 이런 사소한 컴포넌트를 모두 최적화하지 않고 대신 Todoitem컴포넌트처럼 유저의 행위에 따라 컴포넌트가 매우 많아질 수 있는 컴포넌트던가, 함수들을 매우 많이 가지고 있어 코드가 무거운 컴포넌트라면 그런 컴포넌트 한정으로 최적화를 하는 것을 권장한다.

최적화는 결국 꼭해야할것같은 애들만 해주는게 좋고 기능구현이 먼저고 최적화는 가장 마지막에 해라.

 